{-# OPTIONS --safe --with-K #-}
module IS4.Term.Reduction where

open import Relation.Binary using (Preorder)

import      Relation.Binary.Construct.Closure.ReflexiveTransitive            as ReflexiveTransitive
open import Relation.Binary.Construct.Closure.ReflexiveTransitive.Properties using (preorder)

open import Relation.Binary.PropositionalEquality using (_â‰¡_ ; refl ; sym ; trans ; cong ; congâ‚‚)

open import IS4.Term.Base

open ReflexiveTransitive public using (Îµ ; _â—…_)

-------------------
-- Reduction rules
-------------------

data _âŸ¶_ : Tm Î“ a â†’ Tm Î“ a â†’ Set where

  red-fun : (t : Tm (Î“ `, a) b) (u : Tm Î“ a)
    â†’ app (lam t) u âŸ¶ substTm (idâ‚› `, u) t

  exp-fun : (t : Tm Î“ (a â‡’ b))
    â†’ t âŸ¶ lam (app (wkTm fresh t) (var ze))

  red-box : (t : Tm (Î“L ğŸ”’) a) (e : CExt Î“ Î“L Î“R)
    â†’ unbox (box t) e âŸ¶ substTm (lock idâ‚› e) t

  exp-box : (t : Tm Î“ (â—» a))
    â†’ t âŸ¶ box (unbox t new)

  cong-lam : {t t' : Tm (Î“ `, a) b}
    â†’ t âŸ¶ t'
    â†’ lam t âŸ¶ lam t'

  cong-app1 : {t t' : Tm Î“ (a â‡’ b)} {u : Tm Î“ a}
    â†’ t âŸ¶ t'
    â†’ app t u âŸ¶ app t' u

  cong-app2 : {t : Tm Î“ (a â‡’ b)} {u u' : Tm Î“ a}
    â†’ u âŸ¶ u'
    â†’ app t u âŸ¶ app t u'

  cong-box : {t t' : Tm (Î“ ğŸ”’) a}
    â†’ t âŸ¶ t'
    â†’ box t âŸ¶ box t'

  cong-unbox : {t t' : Tm Î“L (â—» a)} {e : CExt Î“ Î“L Î“R}
    â†’ t âŸ¶ t'
    â†’ unbox t e âŸ¶ unbox t' e

  shift-unbox : {Î“LL : Ctx} {a : Ty} (t : Tm Î“LL (â—» a)) {Î“LR Î“L : Ctx} (w : LFExt Î“L Î“LL Î“LR) {Î“R Î“ : Ctx} (e : CExt Î“ Î“L Î“R)
   â†’ unbox t (extRAssoc (upLFExt w) e) âŸ¶ unbox (wkTm (LFExtToâŠ† w) t) e

-- zero or more steps of reduction
Tm-preorder : (Î“ : Ctx) â†’ (a : Ty) â†’ Preorder _ _ _
Tm-preorder Î“ a = preorder (_âŸ¶_ {Î“} {a})

module _ {Î“ : Ctx} {a : Ty} where
  open Preorder (Tm-preorder Î“ a) public
    using    ()
    renaming (_âˆ¼_ to _âŸ¶*_ ; refl to âŸ¶-refl ; reflexive to zero ; trans to multi)

one : {t t' : Tm Î“ a} â†’ t âŸ¶ t' â†’ t âŸ¶* t'
one t = t â—… Îµ

module _ {t : Tm Î“ a â†’ Tm Î” b} (cong-t : âˆ€ {u u' : Tm Î“ a} â†’ (uâŸ¶u' : u âŸ¶ u') â†’ t u âŸ¶* t u') where
  cong-âŸ¶*-to-cong-âŸ¶* : âˆ€ (uâŸ¶*u' : u âŸ¶* u') â†’ t u âŸ¶* t u'
  cong-âŸ¶*-to-cong-âŸ¶* Îµ                 = Îµ
  cong-âŸ¶*-to-cong-âŸ¶* (uâŸ¶u'' â—… u''âŸ¶*u') = multi (cong-t uâŸ¶u'') (cong-âŸ¶*-to-cong-âŸ¶* u''âŸ¶*u')

cong-âŸ¶-to-cong-âŸ¶* : {t : Tm Î“ a â†’ Tm Î” b} (cong-t : âˆ€ {u u' : Tm Î“ a} â†’ (uâŸ¶u' : u âŸ¶ u') â†’ t u âŸ¶ t u') (uâŸ¶*u' : u âŸ¶* u') â†’ t u âŸ¶* t u'
cong-âŸ¶-to-cong-âŸ¶* cong-t = cong-âŸ¶*-to-cong-âŸ¶* (Î» uâŸ¶u' â†’ one (cong-t uâŸ¶u'))

cong-app : {t t' : Tm Î“ (a â‡’ b)} {u u' : Tm Î“  a}
  â†’ t âŸ¶ t' â†’ u âŸ¶ u'
  â†’ app t u âŸ¶* app t' u'
cong-app tâŸ¶t' uâŸ¶u' = cong-app1 tâŸ¶t' â—… cong-app2 uâŸ¶u' â—… Îµ

cong-box* : {t t' : Tm (Î“ ğŸ”’) a}
  â†’ t âŸ¶* t'
  â†’ box t âŸ¶* box t'
cong-box* = cong-âŸ¶-to-cong-âŸ¶* cong-box

cong-unbox* : {t t' : Tm Î“L (â—» a)} {e : CExt Î“ Î“L Î“R}
  â†’ t âŸ¶* t'
  â†’ unbox t e âŸ¶* unbox t' e
cong-unbox* = cong-âŸ¶-to-cong-âŸ¶* cong-unbox

cong-lam* : {t t' : Tm (Î“ `, a) b}
  â†’ t âŸ¶* t'
  â†’ lam t âŸ¶* lam t'
cong-lam* = cong-âŸ¶-to-cong-âŸ¶* cong-lam

cong-app1* : {t t' : Tm Î“ (a â‡’ b)} {u : Tm Î“  a}
  â†’ t âŸ¶* t'
  â†’ app t u âŸ¶* app t' u
cong-app1* = cong-âŸ¶-to-cong-âŸ¶* cong-app1

cong-app2* : {t : Tm Î“ (a â‡’ b)} {u u' : Tm Î“  a}
  â†’ u âŸ¶* u'
  â†’ app t u âŸ¶* app t u'
cong-app2* = cong-âŸ¶-to-cong-âŸ¶* cong-app2

cong-app*  : {t t' : Tm Î“ (a â‡’ b)} {u u' : Tm Î“  a}
  â†’ t âŸ¶* t' â†’ u âŸ¶* u'
  â†’ app t u âŸ¶* app t' u'
cong-app* tâŸ¶*t' uâŸ¶*u' = multi (cong-app1* tâŸ¶*t') (cong-app2* uâŸ¶*u')
