{-# OPTIONS --safe --without-K #-}
module IK.Term.Base where

--
-- Implementation of the IK (Intuitionistic K) calculus from
-- "Fitch-Style Modal Lambda Calculi" by Ranald Clouston (2018)
--

open import IK.Type as Type using (Ty ; Ty-Decidable)

open import Context Ty Ty-Decidable as Context

open Context public
open Type    public

infixr 20 _âˆ™â‚›_

-------------------------------------
-- Variables, terms and substitutions
-------------------------------------

data Tm : Ctx â†’ Ty â†’ Set where

  var  : (v : Var Î“ a)
       ---------------
       â†’ Tm Î“ a

  lam  : (t : Tm (Î“ `, a) b)
         -------------------
       â†’ Tm Î“ (a â‡’ b)

  app  : (t : Tm Î“ (a â‡’ b))
       â†’ (u : Tm Î“ a)
         ------------------
       â†’ Tm Î“ b

  box   : (t : Tm (Î“ ðŸ”’) a)
        ------------------
        â†’ Tm Î“ (â–¡ a)

  unbox : (t : Tm Î“L (â–¡ a))
        â†’ (e : LFExt Î“ (Î“L ðŸ”’) Î“R)
        -------------------------
        â†’ Tm Î“ a

variable
  t t' t'' : Tm Î“ a
  u u' u'' : Tm Î“ a

wkTm : Î“ âŠ† Î“' â†’ Tm Î“ a â†’ Tm Î“' a
wkTm w (var x)                = var (wkVar w x)
wkTm w (lam t)                = lam (wkTm (keep w) t)
wkTm w (app t u)              = app (wkTm w t) (wkTm w u)
wkTm w (box t)                = box (wkTm (keepðŸ”’ w) t)
wkTm w (unbox t e)            = unbox (wkTm (sliceLeft e w) t) (wkLFExt e w)

leftWkTm : (t : Tm Î“ a) â†’ Tm (Î” ,, Î“) a
leftWkTm (var v)     = var (leftWkVar v)
leftWkTm (lam t)     = lam (leftWkTm t)
leftWkTm (app t u)   = app (leftWkTm t) (leftWkTm u)
leftWkTm (box t)     = box (leftWkTm t)
leftWkTm (unbox t e) = unbox (leftWkTm t) (leftWkLFExt e)

open import IK.Term.Substitution Ty Ty-Decidable Tm var wkTm public

-- apply substitution to a term
substTm : Sub Î” Î“ â†’ Tm Î“ a â†’ Tm Î” a
substTm s (var x)     = substVar s x
substTm s (lam t)     = lam (substTm (keepâ‚› s) t)
substTm s (app t u)   = app (substTm s t) (substTm s u)
substTm s (box t)     = box (substTm (keepðŸ”’â‚› s) t)
substTm s (unbox t e) = unbox (substTm (factorSubâ‚› e s) t) (factorExtâ‚› e s)

-- substitution composition
_âˆ™â‚›_ : Sub Î” Î“ â†’ Sub Î”' Î” â†’ Sub Î”' Î“
[]        âˆ™â‚› s = []
(s' `, t) âˆ™â‚› s = s' âˆ™â‚› s `, substTm s t
lock s' e âˆ™â‚› s = lock (s' âˆ™â‚› factorSubâ‚› e s) (factorExtâ‚› e s)
