{-# OPTIONS --safe --with-K #-}
module IK.Applications.Neutrality where

open import IK.Term
open import IK.Norm

open import Data.Empty
open import Relation.Binary using (Transitive)

infixr 3 _âŠ²_
infixr 3 _âŠ²á¶œ_

-- positive subformulas?
data _âŠ²_ : Ty â†’ Ty â†’ Set where
    âŠ²-refl  : a âŠ² a
    sbrâ‡’    : a âŠ² c â†’ a âŠ² (b â‡’ c)
    sbâ–¡    : a âŠ² b â†’ a âŠ² â–¡ b

data _âŠ²á¶œ_   : (a : Ty) â†’ (Î“ : Ctx) â†’ Set where
  here    :  a âŠ² b  â†’ a âŠ²á¶œ (Î“ `, b)
  there   :  a âŠ²á¶œ Î“ â†’ a âŠ²á¶œ (Î“ `, b)
  thereğŸ”’  :  a âŠ²á¶œ Î“ â†’ a âŠ²á¶œ Î“ ğŸ”’

noClosedNe : Ne [] a â†’ âŠ¥
noClosedNe (app n x) = noClosedNe n

neutrVar : Var Î“ a â†’ a âŠ²á¶œ Î“
neutrVar ze     = here âŠ²-refl
neutrVar (su x) = there (neutrVar x)

âŠ²-trans : Transitive _âŠ²_
âŠ²-trans x âŠ²-refl   = x
âŠ²-trans x (sbrâ‡’ y) = sbrâ‡’ (âŠ²-trans x y)
âŠ²-trans x (sbâ–¡ y) = sbâ–¡ (âŠ²-trans x y)

âŠ²-lift : a âŠ² b â†’ b âŠ²á¶œ Î“ â†’ a âŠ²á¶œ Î“
âŠ²-lift p (here x)   = here (âŠ²-trans p x)
âŠ²-lift p (there q)  = there (âŠ²-lift p q)
âŠ²-lift p (thereğŸ”’ q) = thereğŸ”’ (âŠ²-lift p q)

neutrality : Ne Î“ a â†’ a âŠ²á¶œ Î“
neutrality (var x)           = neutrVar x
neutrality (app n x)         = âŠ²-lift (sbrâ‡’ âŠ²-refl) (neutrality n)
neutrality (unbox n nil)     = thereğŸ”’ (âŠ²-lift (sbâ–¡ âŠ²-refl) (neutrality n))
neutrality (unbox n (ext e)) = there (neutrality (unbox n e))
